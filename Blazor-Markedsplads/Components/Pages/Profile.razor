@page "/Profile"
@rendermode InteractiveServer
@using Blazor_Markedsplads.Components
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Navigation
@inject CustomerService CustomerService
@inject ListingService listingService
@inject SessionService SessionService

@if (customerModel != null)
{
    <div class="Information-container">
        <h1>Welcome, @customerModel.Name!</h1>
        <p>Email: @customerModel.Email</p>
        <p>Address: @customerModel.Address</p>
        <p>Age: @customerModel.Age</p>
        <div class="button-box">
            <button class="logout-button" @onclick="Logout">Logout</button>
        </div>
    </div>

    <h2><strong>Your Listings</strong></h2>

    <div class=" listing-container">
        @if (products != null && products.Any())
        {
                @foreach (var product in products)
                {
                    <div class="listings-box">
                        <div class="listing-details">
                            <p>@product.ProductName</p>
                            <p>Price: @product.Price.ToString("C", new System.Globalization.CultureInfo("da-DK"))</p>
                            <p>@product.ProductType</p>
                            <p>@product.Description</p>
                            <p>@product.Nationality</p>
                            <p>@product.Percent%</p>
                            <p>@product.Age</p>
                            <p>
                                <img src="@product.ImageUrl" alt="@product.ProductName" width="100" class="listing-image"/>
                            </p>
                        </div>
                    </div>

                }
        }
        else
        {
        <p>No listings found.</p>
    }
</div>
}

else
{
    <h1>Please log in to view your profile.</h1>
    <a href="/login" class="btn btn-primary">Go to Login</a>
}

<style>
.Information-container{
    background: antiquewhite;
    padding: 20px;
    border-radius: 50px;
}

.button-box{
    display: flex;
    justify-content: end;
}

.logout-button{
    background-color: rgb(209, 125, 125);
    border-radius: 35%;
}
 .listings-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .listing-details p {
    margin: 2px 0; /* Reduces top and bottom spacing */
}
    .listings-box:hover {
        transform: scale(1.05);
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3);
    }

    .listings-box {
        width: 250px;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
        background-color: white;
        transition: transform 0.3s ease-in-out;
    }

    .listing-image {
        width: 80%;
        height: auto;
        max-height: 200px;
        border-radius: 5px;
        justify-content: baseline;
    }
</style>

@code {
    private CustomerModel? customerModel;
    private List<ProductModel>? products;
    private string? userEmail;
    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (SessionService.CurrentUser != null)
            {
                customerModel = SessionService.CurrentUser;
            }
            else
            {

            var emailResult = await SessionStorage.GetAsync<string>("UserEmail");
            userEmail = emailResult.Success ? emailResult.Value : null;

            if (string.IsNullOrEmpty(userEmail))
            {
                Navigation.NavigateTo("/login");
                return;
            }


           // Fetch user details using email
            customerModel = await CustomerService.GetCustomerByEmailAsync(userEmail);
                if (customerModel != null)
                {
                  
                    SessionService.Login(customerModel);
                }
            }
            if(customerModel != null){
                products = await listingService.GetProductsByUserAsync(customerModel.ID); 
            }

            isFirstRender = false;
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("UserEmail");
        Navigation.NavigateTo("/login");
    }
}