@page "/cart"
@using Blazor_Markedsplads.Models
@using Blazor_Markedsplads.Services
@inject CartService CartService
@inject SessionService SessionService
@inject NavigationManager Navigation
@inject ListingService ListingService
 @rendermode InteractiveServer


<h3>Your Cart</h3>

@if (!CartService.GetItems().Any())
{
    <p>Your cart is empty.</p>
}
else
{<table class="table">
      <thead>
        <tr>
          <th>Product</th>
          <th>Price</th>
          <th>Qty</th>
          <th>Subtotal</th>
          <th>Seller</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
    @foreach (var item in CartService.GetItems())
    {
        <tr>
            <td>@item.ProductName</td>
            <td>@item.Price.ToString("C", new System.Globalization.CultureInfo("da-DK"))</td>
            <td>@item.Quantity</td>
            <td>@item.TotalPrice.ToString("C", new System.Globalization.CultureInfo("da-DK"))</td>
            <td>
                @{
                    sellerByProductId.TryGetValue(item.ID, out var seller);
                    if (seller != null)
                    {
                        <b>@seller.Name</b>

                        <br />
                        <a href="mailto:@seller.Email">@seller.Email</a>
                    }
                    else
                    {
                        <span>Seller not found</span>
                    }
                }
            </td>
            <td>
                <button class="btn btn-sm btn-danger"
                        @onclick="() => Remove(item.ID)">
                    Remove
                </button>
            </td>
        </tr>
    }
        </tbody>
    </table>

  

    <h5>Grand Total: @CartService.GrandTotal.ToString("C", new System.Globalization.CultureInfo("da-DK"))</h5>
    <button class="btn btn-secondary" @onclick="ClearCart">Clear Cart</button>

    <div class="alert alert-info mt-4">
        To complete your order, please <strong>contact each seller</strong> using above phone numbers.
    </div>
}

@code {
    private Dictionary<int, CustomerModel?> sellerByProductId = new();

    protected override async Task OnInitializedAsync()
    {
        foreach (var item in CartService.GetItems())
        {
            var seller = await ListingService.GetCustomerByProductIdAsync(item.ID);
            sellerByProductId[item.ID] = seller;
        }

        CartService.OnChange += OnCartChangedAsync;
    }

    public void Dispose()
    {
        CartService.OnChange -= OnCartChangedAsync;
    }

    private Task OnCartChangedAsync()
    {
        return InvokeAsync(StateHasChanged);
    }

    private void Remove(int productId) => CartService.RemoveFromCartAsync(productId);
    private void ClearCart() => CartService.ClearCartAsync();
}
