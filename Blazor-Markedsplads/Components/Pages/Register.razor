@page "/register"
@using Blazor_Markedsplads.Models
@using Blazor_Markedsplads.Services
@using Blazor_Markedsplads.Components

@rendermode InteractiveServer
@inject CustomerService CustomerService
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@inject SessionService SessionService


<h3 class="Title">User Registration</h3>

<EditForm Model="newCustomer" OnValidSubmit="HandleRegister" >
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newCustomer.Name" placeholder="Enter your name" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="newCustomer.Email" placeholder="Enter your email" />
    </div>
    <div class="form-group">
        <label for="age">Age</label>
        <InputNumber id="age" class="form-control" @bind-Value="newCustomer.Age" placeholder="Enter your age" />
    </div>
    <div class="form-group">
        <label for="address">Address</label>
        <InputText id="address" class="form-control" @bind-Value="newCustomer.Address" placeholder="Enter your address" />
    </div>
    <div class="form-group">
        <label for="phone">Phone</label>
        <InputNumber id="phone" class="form-control" @bind-Value="newCustomer.Phone" placeholder="Enter your phone number" />
    </div>
   
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="newCustomer.Password" placeholder="Enter a password" />
    </div>

    <button type="submit" class="btn btn-primary" style="margin-top:18px;">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

<style>
    .Title{
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 15px;
        border-radius: 50px;
        @*Makes border more circuler*@
        border: 1px solid black;
        background-color: antiquewhite;
        width: 500px;

    }
</style>

@code {
    

    private CustomerModel newCustomer = new();
    private string message = string.Empty;
    private async Task HandleRegister()
    {
        try
        {
            
            int createdId = await CustomerService.CreateCustomerAsync(newCustomer);

            if (createdId > 0)
            {
                newCustomer.ID = createdId;
                await SessionStorage.SetAsync("UserEmail", newCustomer.Email);
                SessionService.Login(newCustomer);
                Navigation.NavigateTo("/Profile");
            }
            else
            {
                message = "Registration failed.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

}