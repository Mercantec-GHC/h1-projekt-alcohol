@page "/create-listing"
@rendermode InteractiveServer
@inject ListingService listingService
@inject DBService dbService

<h3>Create Listing</h3>

<EditForm Model="@listingModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Title field -->
    <div class="mb-3">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="listingModel.ProductName" />
        <ValidationMessage For="@(() => listingModel.ProductName)" />
    </div>

    <!-- Price field -->
    <div class="mb-3">
        <label for="price">Price:</label>
        <InputNumber id="price" class="form-control" @bind-Value="listingModel.Price" />
        <ValidationMessage For="@(() => listingModel.Price)" />
    </div>

    <!-- Description field -->
    @* <div class="mb-3">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="listingModel.Description" rows="3" />
        <ValidationMessage For="@(() => listingModel.Description)" />
    </div> *@

    <!-- Category field -->
    <div class="mb-3">
        <label for="category">Category:</label>
        <InputSelect id="category" class="form-select" @bind-Value="listingModel.ProductType">
            <option value="">-- select category --</option>
            <option value="Beer">Beer</option>
            <option value="Wiskey">Wiskey</option>
            <option value="Wine">Wine</option>
        </InputSelect>
        <ValidationMessage For="@(() => listingModel.ProductType)" />
    </div>

    <!-- Image URL field -->
    <div class="mb-3">
        <label for="imageUrl">Image URL:</label>
        <InputText id="imageUrl" class="form-control" @bind-Value="listingModel.ImageUrl" />
        <ValidationMessage For="@(() => listingModel.ImageUrl)" />
    </div>

    <button type="submit" class="btn btn-primary">Create Listing</button>
</EditForm>

<style>
    .card {
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.form-label {
    font-weight: bold;
}
    using Microsoft.VisualBasic;

.btn-primary {
    background-color: #007bff;
    border: none;
    padding: 10px;
    transition: background-color 0.3s ease;
}

.btn-primary:hover {
    background-color: #0056b3;
}

.form-control, .form-select {
    border: 2px solid #ddd;
    padding: 8px;
    border-radius: 5px;
}

.text-danger {
    font-size: 0.85rem;
}
</style>


@code {
    
    private ProductModel listingModel { get; set; } = new ProductModel();

    private async Task HandleValidSubmit()
    {
        //Cannot check for customer, as login and register system is not yet setup.
        @* listingModel.CustomerID = currentUserID; *@

        listingModel.CustomerID = 1; //Temporary test ID
        bool success = await dbService.AddListingAsync(listingModel);

        if(success)
        {
            listingModel = new ProductModel();
        }
    }
}
