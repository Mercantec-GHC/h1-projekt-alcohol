@page "/create-listing"
@using Blazor_Markedsplads.Services
@rendermode InteractiveServer
@inject ProtectedSessionStorage SessionStorage
@inject ListingService listingService
@inject DBService dbService
@inject SessionService SessionService
@inject NavigationManager Navigation
@inject CustomerService customerService

<h3 class="Title">Create Listing</h3>

<div class="listing-container">
    <EditForm Model="@listingModel" OnValidSubmit="async () => await HandleValidSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Title field -->
        <div class="mb-3">
            <label for="title">Title:</label>
            <InputText id="title" class="form-control" @bind-Value="listingModel.ProductName" />
            <ValidationMessage For="@(() => listingModel.ProductName)" />
        </div>

        <!-- Price field -->
        <div class="mb-3">
            <label for="price">Price:</label>
            <InputNumber id="price" class="form-control" @bind-Value="listingModel.Price" />
            <ValidationMessage For="@(() => listingModel.Price)" />
        </div>

        <!-- Description field -->
        <div class="mb-3">
            <label for="description">Description:</label>
            <InputTextArea id="description" class="form-control" @bind-Value="listingModel.Description" rows="3" />
            <ValidationMessage For="@(() => listingModel.Description)" />
        </div>

        <!-- Category field -->
        <div class="mb-3">
            <label for="category">Category:</label>
            <InputSelect id="category" class="form-select" @bind-Value="listingModel.ProductType">
                <option value="">-- select category --</option>
                <option value="Beer">Beer</option>
                <option value="Wiskey">Wiskey</option>
                <option value="Wine">Wine</option> 
            </InputSelect>
            <ValidationMessage For="@(() => listingModel.ProductType)" />
        </div>

        <div class="mb-3">
            <label for="nationality">Nationality:</label>
            <InputText id="nationality" class="form-control" @bind-Value="listingModel.Nationality"/>
        </div>

        <div class="mb-3">
            <label for="percent">Percentage:</label>
            <InputNumber id="percent" class="form-control" @bind-Value="listingModel.Percent"/>
            <ValidationMessage For="@(() => listingModel.Percent)" />
        </div>

        <div class="mb-3">
            <label for="age">Age:</label>
            <InputNumber id="age" class="form-control" @bind-Value="listingModel.Age"/>

        </div>

        <!-- Image URL field -->
        <div class="mb-3">
            <label for="imageUrl">Image URL:</label>
            <InputText id="imageUrl" class="form-control" @bind-Value="listingModel.ImageUrl" />
            <ValidationMessage For="@(() => listingModel.ImageUrl)" />
        </div>

        <button type="submit" class="btn btn-primary">Create Listing</button>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
    </EditForm>
</div>

<style>
.Title{
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 15px;
        border-radius: 50px;
        @*Makes border more circuler*@
        border: 1px solid black;
        background-color: antiquewhite;
        width: 500px;

    }
.listing-container {
    background-color: antiquewhite;;
    width: 100%;
    max-width: 50%;
    padding: 20px;
    border-radius: 10px;
    border: 1px solid black;
}

    .card {
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.mb-3
{
    width: 100%;
    padding: 7px;
    border-radius: 8px;
    font-size: 16px;
    
}
.form-control, .form-select {
    width: 50%;
    border: 2px solid #aaa;
    padding: 30px;
    border-radius: 8px;
    font-size: 16px;
}

.form-label {
    font-weight: bold;
}

.btn-primary {
    width: 50%;
    font-size: 18px;
    padding: 12px;
    background-color: #007bff;
    border-radius: 8px;
    padding: 10px;
    transition: transform 0.3s ease,all background-color 0.3s ease;
}

.btn-primary:hover {
    background-color: #0056b3;
    transform: scale(1.05);
}

.form-control, .form-select {
    border: 2px solid #ddd;
    padding: 8px;
    border-radius: 5px;
}

.text-danger {
    font-size: 0.85rem;
}
</style>


@code {
    
    private ProductModel listingModel { get; set; } = new ProductModel();
    private string? errorMessage;
    private async Task HandleValidSubmit()
{
    var emailResult = await SessionStorage.GetAsync<string>("UserEmail");
    var userEmail = emailResult.Success ? emailResult.Value : null;

    if (!string.IsNullOrEmpty(userEmail))
    {
        errorMessage = "You must be logged in to create a listing!";
        Console.WriteLine(errorMessage); // Debugging check
        var user = await customerService.GetCustomerByEmailAsync(userEmail); // ✅ Get actual logged-in user
        listingModel.CustomerID = user.ID; // ✅ Assign the correct customer_id to the listing
    }
    else
    {
        Console.WriteLine("Error: No logged-in user found.");
        return;
    }

    bool success = await dbService.AddListingAsync(listingModel); // ✅ Store listing in DB

        if(!success)
        {
            Console.WriteLine("Failed to add listing!");
        }else
        {
            listingModel = new ProductModel();
        }
    }
    private bool _redirected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !SessionService.IsLoggedIn && !_redirected)
        {
            _redirected = true;
            Navigation.NavigateTo("/login");
        }
    }
}


