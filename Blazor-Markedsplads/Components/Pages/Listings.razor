@page "/listings"
@using Blazor_Markedsplads.Services
@using Blazor_Markedsplads.Components
@using Blazor_Markedsplads.Models
@rendermode InteractiveServer
@inject ListingService listingService
@inject DBService dbService
@inject CartService CartService
@inject SessionService SessionService
@inject NavigationManager Navigation


<h3 class="Title"<strong>All Listings</strong></h3>

@if (!listings.Any())
{
    <p>No listings yet.</p>
}
else
{
     <div class="listings-container">
        @foreach (var listing in listings)
        {
            <div class="listings-box">
                <div class="listing-details">
                    <p>@listing.ProductName</p>
                    <p> @listing.Price.ToString("C", new System.Globalization.CultureInfo("da-DK"))</p>
                    <p>@listing.Description</p>
                    <p>@listing.ProductType</p>
                    <p>@listing.Nationality</p>
                    <p>@listing.Percent%</p>
                    <p>@listing.Age</p>
                    <p>
                        @if (!string.IsNullOrWhiteSpace(listing.ImageUrl))
                        {
                            <img src="@listing.ImageUrl" alt="Listing Image" class="listing-image" />
                        }
                    </p>
                    <div class="add-to-cart-controls">
                        <input type="number" min="1" style="width: 60px"
                               @bind="listing.QuantityToAdd" />
                        <button @onclick="@(() => AddToCart(listing, listing.QuantityToAdd))">
                            Add to cart
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

  
}
<style>
    .Title{
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 15px;
        border-radius: 50px;
        @*Makes border more circuler*@
        border: 1px solid black;
        background-color: antiquewhite;
        width: 500px;

    }

    .listings-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .listing-details p {
    margin: 2px 0; /* Reduces top and bottom spacing */
}
    .listings-box:hover {
        transform: scale(1.05);
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3);
    }

    .listings-box {
        width: 250px;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
        background-color: white;
        transition: transform 0.3s ease-in-out;
    }

    .listing-image {
        width: 80%;
        height: auto;
        max-height: 200px;
        border-radius: 5px;
        justify-content: baseline;
    }

    .add-to-cart-controls {
        margin-top: 8px;
        display: flex;
        gap: 8px;
    }
</style>



@code {
    
    private List<ProductModel> listings = new();

    protected override async Task OnInitializedAsync()
    {
        listings = await dbService.GetAllListingsAsync();
    }
    private void AddToCart(ProductModel product, int quantity)
    {
        CartService.AddToCartAsync(product, quantity);
        
    }
    private bool _redirected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !SessionService.IsLoggedIn && !_redirected)
        {
            _redirected = true; 
            Navigation.NavigateTo("/login");
        }
    }
    // protected override void OnInitialized()
    // {
    //     if (!SessionService.IsLoggedIn)
    //     {
    //         Navigation.NavigateTo("/login");
    //     }
    // }

}


    @* private IEnumerable<ProductModel> listings = Array.Empty<ProductModel>();

    @* private IEnumerable<ProductModel> listings = Array.Empty<ProductModel>();*@


   
}