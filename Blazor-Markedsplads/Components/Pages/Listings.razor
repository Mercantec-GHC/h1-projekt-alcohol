@page "/listings"
@using Blazor_Markedsplads.Services
@using Blazor_Markedsplads.Components
@using Blazor_Markedsplads.Models
@rendermode InteractiveServer
@inject ListingService listingService
@inject DBService dbService
@inject CartService CartService
@inject SessionService SessionService
@inject NavigationManager Navigation

<div class="Title">Listings</div>

<div class="filters">
    <label>Alcohol type: </label>
    <select @onchange="OnAlcoholTypeChanged">
        <option value="">All</option>
        <option value="Wine">Wine</option>
        <option value="Beer">Beer</option>
        <option value="SPIRITUS">Spiritus</option>
    </select>

    <label style="margin-left: 2rem;">Sort by Price: </label>
    <select @onchange="OnSortOrderChanged">
        <option value="asc">from low to high</option>
        <option value="desc">from hight to low</option>
    </select>

</div>

@if (!FilteredListings.Any())
{
    <p>No listings yet.</p>
}
else
{
    <div class="listings-container">
        @foreach (var listing in FilteredListings)
        {
            <div class="listings-box">
                <div class="listing-details">
                    <p>@listing.ProductName</p>
                    <p>@listing.Price.ToString("C", new System.Globalization.CultureInfo("da-DK"))</p>
                    <p>@listing.ProductType</p>
                    <p>@listing.Nationality</p>
                    <p>@listing.Percent%</p>
                    <p>@listing.Age</p>
                    <p>@listing.SellerName</p>
                    <p>
                        @if (!string.IsNullOrWhiteSpace(listing.ImageUrl))
                        {
                            <img src="@listing.ImageUrl" alt="Listing Image" class="listing-image" />
                        }
                    </p>
                    <div class="add-to-cart-controls">
                        <input type="number" min="1" style="width: 60px"
                               @bind="listing.QuantityToAdd" />
                        <button @onclick="@(() => AddToCart(listing, listing.QuantityToAdd))">
                            Add to cart
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
<style>
   
    .Title {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px 28px;
        border-radius: 50px;
        border: 2px solid #433421;
        background-color: #f6edd9;
        width: fit-content;
        margin: 2rem auto 2.5rem auto;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1px;
        box-shadow: 0 3px 14px rgba(120, 94, 43, 0.15);
    }

    .filters {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1.2rem;
        padding: 0.8rem 1.3rem;
        background: #fffbe7;
        border-radius: 1.5rem;
        margin: 0 auto 2.5rem auto;
        box-shadow: 0 3px 12px rgba(112, 84, 40, 0.12);
        width: fit-content;
    }

        .filters label {
            font-size: 1.06rem;
            font-weight: 600;
            color: #71582c;
            margin-right: 0.5rem;
        }

        .filters select {
            padding: 0.45rem 1.1rem;
            border-radius: 0.7rem;
            border: 1.5px solid #c1a97a;
            background: #faf3e4;
            font-size: 1.08rem;
            transition: border 0.2s;
            outline: none;
        }

            .filters select:focus {
                border: 1.5px solid #c8a142;
                background: #fff9e6;
            }

    .listings-container {
        margin-top: 2.5rem;
    }
    .listings-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .listing-details p {
    margin: 2px 0; /* Reduces top and bottom spacing */
}
    .listings-box:hover {
        transform: scale(1.05);
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3);
    }

    .listings-box {
        width: 250px;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
        background-color: white;
        transition: transform 0.3s ease-in-out;
    }

    .listing-image {
        width: 80%;
        height: auto;
        max-height: 200px;
        border-radius: 5px;
        justify-content: baseline;
    }

    .add-to-cart-controls {
        margin-top: 8px;
        display: flex;
        gap: 8px;
    }
</style>



@code {
    
    private List<ProductModel> listings = new();
    private string selectedAlcohol = "";
    private string sortOrder = "asc";


    protected override async Task OnInitializedAsync()
    {
        listings = await dbService.GetAllListingsAsync();
    }
    private IEnumerable<ProductModel> FilteredListings =>
      (string.IsNullOrEmpty(selectedAlcohol)
          ? listings
          : listings.Where(l =>
              !string.IsNullOrEmpty(l.ProductType) &&
              l.ProductType.Contains(selectedAlcohol, StringComparison.OrdinalIgnoreCase)))
      .OrderBy(l => sortOrder == "asc" ? l.Price : -l.Price);

    private void OnAlcoholTypeChanged(ChangeEventArgs e)
    {
        selectedAlcohol = e?.Value?.ToString() ?? "";
        StateHasChanged();
    }
    private void OnSortOrderChanged(ChangeEventArgs e)
    {
        sortOrder = e?.Value?.ToString() ?? "asc";
        StateHasChanged();
    }
    private void AddToCart(ProductModel product, int quantity)
    {
        CartService.AddToCartAsync(product, quantity);
        
    }
    private bool _redirected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !SessionService.IsLoggedIn && !_redirected)
        {
            _redirected = true; 
            Navigation.NavigateTo("/login");
        }
    }
  

}


   
}